Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement_parseCommand
Rule 2     statement_parseCommand -> COMMAND DS
Rule 3     statement_parseCommand -> COMMAND
Rule 4     statement_parseCommand -> COMMAND COMMAND
Rule 5     statement_parseCommand -> INFO TYPE
Rule 6     statement_parseCommand -> INFO
Rule 7     statement_parseCommand -> COMMAS INFO COMMAS
Rule 8     statement_parseCommand -> INFO INFO
Rule 9     statement_parseCommand -> INFO US INFO

Terminals, with rules where they appear

COMMAND              : 2 3 4 4
COMMAS               : 7 7
DS                   : 2
INFO                 : 5 6 7 8 8 9 9
TYPE                 : 5
US                   : 9
error                : 

Nonterminals, with rules where they appear

statement            : 0
statement_parseCommand : 1

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement_parseCommand
    (2) statement_parseCommand -> . COMMAND DS
    (3) statement_parseCommand -> . COMMAND
    (4) statement_parseCommand -> . COMMAND COMMAND
    (5) statement_parseCommand -> . INFO TYPE
    (6) statement_parseCommand -> . INFO
    (7) statement_parseCommand -> . COMMAS INFO COMMAS
    (8) statement_parseCommand -> . INFO INFO
    (9) statement_parseCommand -> . INFO US INFO

    COMMAND         shift and go to state 3
    INFO            shift and go to state 4
    COMMAS          shift and go to state 5

    statement                      shift and go to state 1
    statement_parseCommand         shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> statement_parseCommand .

    $end            reduce using rule 1 (statement -> statement_parseCommand .)


state 3

    (2) statement_parseCommand -> COMMAND . DS
    (3) statement_parseCommand -> COMMAND .
    (4) statement_parseCommand -> COMMAND . COMMAND

    DS              shift and go to state 7
    $end            reduce using rule 3 (statement_parseCommand -> COMMAND .)
    COMMAND         shift and go to state 6


state 4

    (5) statement_parseCommand -> INFO . TYPE
    (6) statement_parseCommand -> INFO .
    (8) statement_parseCommand -> INFO . INFO
    (9) statement_parseCommand -> INFO . US INFO

    TYPE            shift and go to state 9
    $end            reduce using rule 6 (statement_parseCommand -> INFO .)
    INFO            shift and go to state 8
    US              shift and go to state 10


state 5

    (7) statement_parseCommand -> COMMAS . INFO COMMAS

    INFO            shift and go to state 11


state 6

    (4) statement_parseCommand -> COMMAND COMMAND .

    $end            reduce using rule 4 (statement_parseCommand -> COMMAND COMMAND .)


state 7

    (2) statement_parseCommand -> COMMAND DS .

    $end            reduce using rule 2 (statement_parseCommand -> COMMAND DS .)


state 8

    (8) statement_parseCommand -> INFO INFO .

    $end            reduce using rule 8 (statement_parseCommand -> INFO INFO .)


state 9

    (5) statement_parseCommand -> INFO TYPE .

    $end            reduce using rule 5 (statement_parseCommand -> INFO TYPE .)


state 10

    (9) statement_parseCommand -> INFO US . INFO

    INFO            shift and go to state 12


state 11

    (7) statement_parseCommand -> COMMAS INFO . COMMAS

    COMMAS          shift and go to state 13


state 12

    (9) statement_parseCommand -> INFO US INFO .

    $end            reduce using rule 9 (statement_parseCommand -> INFO US INFO .)


state 13

    (7) statement_parseCommand -> COMMAS INFO COMMAS .

    $end            reduce using rule 7 (statement_parseCommand -> COMMAS INFO COMMAS .)

